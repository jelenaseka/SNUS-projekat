//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ReportManager.ServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IReportManagerService")]
    public interface IReportManagerService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportManagerService/DisplayAlarmsByDate", ReplyAction="http://tempuri.org/IReportManagerService/DisplayAlarmsByDateResponse")]
        string[] DisplayAlarmsByDate(System.DateTime dateFrom, System.DateTime dateTo, string sortBy, string sortType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportManagerService/DisplayAlarmsByDate", ReplyAction="http://tempuri.org/IReportManagerService/DisplayAlarmsByDateResponse")]
        System.Threading.Tasks.Task<string[]> DisplayAlarmsByDateAsync(System.DateTime dateFrom, System.DateTime dateTo, string sortBy, string sortType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportManagerService/DisplayAlarmsByPriority", ReplyAction="http://tempuri.org/IReportManagerService/DisplayAlarmsByPriorityResponse")]
        string[] DisplayAlarmsByPriority(int priority, string sortType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportManagerService/DisplayAlarmsByPriority", ReplyAction="http://tempuri.org/IReportManagerService/DisplayAlarmsByPriorityResponse")]
        System.Threading.Tasks.Task<string[]> DisplayAlarmsByPriorityAsync(int priority, string sortType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportManagerService/DisplayTagsByDate", ReplyAction="http://tempuri.org/IReportManagerService/DisplayTagsByDateResponse")]
        string[] DisplayTagsByDate(System.DateTime dateFrom, System.DateTime dateTo, string sortType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportManagerService/DisplayTagsByDate", ReplyAction="http://tempuri.org/IReportManagerService/DisplayTagsByDateResponse")]
        System.Threading.Tasks.Task<string[]> DisplayTagsByDateAsync(System.DateTime dateFrom, System.DateTime dateTo, string sortType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportManagerService/DisplayAnalogInputs", ReplyAction="http://tempuri.org/IReportManagerService/DisplayAnalogInputsResponse")]
        string[] DisplayAnalogInputs(string sortType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportManagerService/DisplayAnalogInputs", ReplyAction="http://tempuri.org/IReportManagerService/DisplayAnalogInputsResponse")]
        System.Threading.Tasks.Task<string[]> DisplayAnalogInputsAsync(string sortType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportManagerService/DisplayDigitalInputs", ReplyAction="http://tempuri.org/IReportManagerService/DisplayDigitalInputsResponse")]
        string[] DisplayDigitalInputs(string sortType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportManagerService/DisplayDigitalInputs", ReplyAction="http://tempuri.org/IReportManagerService/DisplayDigitalInputsResponse")]
        System.Threading.Tasks.Task<string[]> DisplayDigitalInputsAsync(string sortType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportManagerService/DisplayTagById", ReplyAction="http://tempuri.org/IReportManagerService/DisplayTagByIdResponse")]
        string[] DisplayTagById(string tagName, string sortType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportManagerService/DisplayTagById", ReplyAction="http://tempuri.org/IReportManagerService/DisplayTagByIdResponse")]
        System.Threading.Tasks.Task<string[]> DisplayTagByIdAsync(string tagName, string sortType);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IReportManagerServiceChannel : ReportManager.ServiceReference.IReportManagerService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ReportManagerServiceClient : System.ServiceModel.ClientBase<ReportManager.ServiceReference.IReportManagerService>, ReportManager.ServiceReference.IReportManagerService {
        
        public ReportManagerServiceClient() {
        }
        
        public ReportManagerServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ReportManagerServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ReportManagerServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ReportManagerServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string[] DisplayAlarmsByDate(System.DateTime dateFrom, System.DateTime dateTo, string sortBy, string sortType) {
            return base.Channel.DisplayAlarmsByDate(dateFrom, dateTo, sortBy, sortType);
        }
        
        public System.Threading.Tasks.Task<string[]> DisplayAlarmsByDateAsync(System.DateTime dateFrom, System.DateTime dateTo, string sortBy, string sortType) {
            return base.Channel.DisplayAlarmsByDateAsync(dateFrom, dateTo, sortBy, sortType);
        }
        
        public string[] DisplayAlarmsByPriority(int priority, string sortType) {
            return base.Channel.DisplayAlarmsByPriority(priority, sortType);
        }
        
        public System.Threading.Tasks.Task<string[]> DisplayAlarmsByPriorityAsync(int priority, string sortType) {
            return base.Channel.DisplayAlarmsByPriorityAsync(priority, sortType);
        }
        
        public string[] DisplayTagsByDate(System.DateTime dateFrom, System.DateTime dateTo, string sortType) {
            return base.Channel.DisplayTagsByDate(dateFrom, dateTo, sortType);
        }
        
        public System.Threading.Tasks.Task<string[]> DisplayTagsByDateAsync(System.DateTime dateFrom, System.DateTime dateTo, string sortType) {
            return base.Channel.DisplayTagsByDateAsync(dateFrom, dateTo, sortType);
        }
        
        public string[] DisplayAnalogInputs(string sortType) {
            return base.Channel.DisplayAnalogInputs(sortType);
        }
        
        public System.Threading.Tasks.Task<string[]> DisplayAnalogInputsAsync(string sortType) {
            return base.Channel.DisplayAnalogInputsAsync(sortType);
        }
        
        public string[] DisplayDigitalInputs(string sortType) {
            return base.Channel.DisplayDigitalInputs(sortType);
        }
        
        public System.Threading.Tasks.Task<string[]> DisplayDigitalInputsAsync(string sortType) {
            return base.Channel.DisplayDigitalInputsAsync(sortType);
        }
        
        public string[] DisplayTagById(string tagName, string sortType) {
            return base.Channel.DisplayTagById(tagName, sortType);
        }
        
        public System.Threading.Tasks.Task<string[]> DisplayTagByIdAsync(string tagName, string sortType) {
            return base.Channel.DisplayTagByIdAsync(tagName, sortType);
        }
    }
}
